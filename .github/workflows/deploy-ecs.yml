name: Build and Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]
  release:
    types: [created]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_SERVICE: techtalk-service-2
  ECS_CLUSTER: techtalk-prac-cluster
  ECS_TASK_DEFINITION: task-2-revision1.json
  CONTAINER_NAME: techtalk-container-2

permissions:
  contents: read
  deployments: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '7.0'

      - name: Build with Gradle
        run: |
          cd ./acc-techtalk
          ./gradlew build

      - name: List build/libs contents
        run: |
          cd acc-techtalk
          ls -la build/libs


      

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout code
        uses: actions/checkout@v4

      - name: List directory contents
        run: |
          echo "Current directory:"
          pwd
          echo "List of files in the workspace:"
          ls -la
          echo "List of files in acc-techtalk:"
          ls -la acc-techtalk


      - name: Check Dockerfile location
        working-directory: ./acc-techtalk
        run: |
            if [ -f Dockerfile ]; then echo "Dockerfile found"; else echo "Dockerfile not found"; fi


      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT


      - name: Read ECS Task Definition JSON
        id: read-task-def
        run: |
          task_def=$(cat task-2-revision1.json)
          echo "task-definition=${task_def}" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the task definition
        id: replace-image
        run: |
          task_def=$(echo ${{ steps.read-task-def.outputs.task-definition }} | jq --arg IMAGE "${{ steps.build-image.outputs.image }}" '.containerDefinitions[0].image = $IMAGE')
          echo "${task_def}" > new-task-def.json

      - name: Register updated task definition
        id: register-task-def
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.register-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
